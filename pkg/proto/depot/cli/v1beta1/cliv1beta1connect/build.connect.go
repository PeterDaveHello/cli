// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: depot/cli/v1beta1/build.proto

package cliv1beta1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1beta1 "github.com/depot/cli/pkg/proto/depot/cli/v1beta1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BuildServiceName is the fully-qualified name of the BuildService service.
	BuildServiceName = "depot.cli.v1beta1.BuildService"
)

// BuildServiceClient is a client for the depot.cli.v1beta1.BuildService service.
type BuildServiceClient interface {
	CreateBuild(context.Context, *connect_go.Request[v1beta1.CreateBuildRequest]) (*connect_go.Response[v1beta1.CreateBuildResponse], error)
	FinishBuild(context.Context, *connect_go.Request[v1beta1.FinishBuildRequest]) (*connect_go.Response[v1beta1.FinishBuildResponse], error)
	GetBuildKitConnection(context.Context, *connect_go.Request[v1beta1.GetBuildKitConnectionRequest]) (*connect_go.ServerStreamForClient[v1beta1.GetBuildKitConnectionResponse], error)
	ReportBuildHealth(context.Context) *connect_go.ClientStreamForClient[v1beta1.ReportBuildHealthRequest, v1beta1.ReportBuildHealthResponse]
	ReportTimings(context.Context, *connect_go.Request[v1beta1.ReportTimingsRequest]) (*connect_go.Response[v1beta1.ReportTimingsResponse], error)
}

// NewBuildServiceClient constructs a client for the depot.cli.v1beta1.BuildService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBuildServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BuildServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &buildServiceClient{
		createBuild: connect_go.NewClient[v1beta1.CreateBuildRequest, v1beta1.CreateBuildResponse](
			httpClient,
			baseURL+"/depot.cli.v1beta1.BuildService/CreateBuild",
			opts...,
		),
		finishBuild: connect_go.NewClient[v1beta1.FinishBuildRequest, v1beta1.FinishBuildResponse](
			httpClient,
			baseURL+"/depot.cli.v1beta1.BuildService/FinishBuild",
			opts...,
		),
		getBuildKitConnection: connect_go.NewClient[v1beta1.GetBuildKitConnectionRequest, v1beta1.GetBuildKitConnectionResponse](
			httpClient,
			baseURL+"/depot.cli.v1beta1.BuildService/GetBuildKitConnection",
			opts...,
		),
		reportBuildHealth: connect_go.NewClient[v1beta1.ReportBuildHealthRequest, v1beta1.ReportBuildHealthResponse](
			httpClient,
			baseURL+"/depot.cli.v1beta1.BuildService/ReportBuildHealth",
			opts...,
		),
		reportTimings: connect_go.NewClient[v1beta1.ReportTimingsRequest, v1beta1.ReportTimingsResponse](
			httpClient,
			baseURL+"/depot.cli.v1beta1.BuildService/ReportTimings",
			opts...,
		),
	}
}

// buildServiceClient implements BuildServiceClient.
type buildServiceClient struct {
	createBuild           *connect_go.Client[v1beta1.CreateBuildRequest, v1beta1.CreateBuildResponse]
	finishBuild           *connect_go.Client[v1beta1.FinishBuildRequest, v1beta1.FinishBuildResponse]
	getBuildKitConnection *connect_go.Client[v1beta1.GetBuildKitConnectionRequest, v1beta1.GetBuildKitConnectionResponse]
	reportBuildHealth     *connect_go.Client[v1beta1.ReportBuildHealthRequest, v1beta1.ReportBuildHealthResponse]
	reportTimings         *connect_go.Client[v1beta1.ReportTimingsRequest, v1beta1.ReportTimingsResponse]
}

// CreateBuild calls depot.cli.v1beta1.BuildService.CreateBuild.
func (c *buildServiceClient) CreateBuild(ctx context.Context, req *connect_go.Request[v1beta1.CreateBuildRequest]) (*connect_go.Response[v1beta1.CreateBuildResponse], error) {
	return c.createBuild.CallUnary(ctx, req)
}

// FinishBuild calls depot.cli.v1beta1.BuildService.FinishBuild.
func (c *buildServiceClient) FinishBuild(ctx context.Context, req *connect_go.Request[v1beta1.FinishBuildRequest]) (*connect_go.Response[v1beta1.FinishBuildResponse], error) {
	return c.finishBuild.CallUnary(ctx, req)
}

// GetBuildKitConnection calls depot.cli.v1beta1.BuildService.GetBuildKitConnection.
func (c *buildServiceClient) GetBuildKitConnection(ctx context.Context, req *connect_go.Request[v1beta1.GetBuildKitConnectionRequest]) (*connect_go.ServerStreamForClient[v1beta1.GetBuildKitConnectionResponse], error) {
	return c.getBuildKitConnection.CallServerStream(ctx, req)
}

// ReportBuildHealth calls depot.cli.v1beta1.BuildService.ReportBuildHealth.
func (c *buildServiceClient) ReportBuildHealth(ctx context.Context) *connect_go.ClientStreamForClient[v1beta1.ReportBuildHealthRequest, v1beta1.ReportBuildHealthResponse] {
	return c.reportBuildHealth.CallClientStream(ctx)
}

// ReportTimings calls depot.cli.v1beta1.BuildService.ReportTimings.
func (c *buildServiceClient) ReportTimings(ctx context.Context, req *connect_go.Request[v1beta1.ReportTimingsRequest]) (*connect_go.Response[v1beta1.ReportTimingsResponse], error) {
	return c.reportTimings.CallUnary(ctx, req)
}

// BuildServiceHandler is an implementation of the depot.cli.v1beta1.BuildService service.
type BuildServiceHandler interface {
	CreateBuild(context.Context, *connect_go.Request[v1beta1.CreateBuildRequest]) (*connect_go.Response[v1beta1.CreateBuildResponse], error)
	FinishBuild(context.Context, *connect_go.Request[v1beta1.FinishBuildRequest]) (*connect_go.Response[v1beta1.FinishBuildResponse], error)
	GetBuildKitConnection(context.Context, *connect_go.Request[v1beta1.GetBuildKitConnectionRequest], *connect_go.ServerStream[v1beta1.GetBuildKitConnectionResponse]) error
	ReportBuildHealth(context.Context, *connect_go.ClientStream[v1beta1.ReportBuildHealthRequest]) (*connect_go.Response[v1beta1.ReportBuildHealthResponse], error)
	ReportTimings(context.Context, *connect_go.Request[v1beta1.ReportTimingsRequest]) (*connect_go.Response[v1beta1.ReportTimingsResponse], error)
}

// NewBuildServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBuildServiceHandler(svc BuildServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/depot.cli.v1beta1.BuildService/CreateBuild", connect_go.NewUnaryHandler(
		"/depot.cli.v1beta1.BuildService/CreateBuild",
		svc.CreateBuild,
		opts...,
	))
	mux.Handle("/depot.cli.v1beta1.BuildService/FinishBuild", connect_go.NewUnaryHandler(
		"/depot.cli.v1beta1.BuildService/FinishBuild",
		svc.FinishBuild,
		opts...,
	))
	mux.Handle("/depot.cli.v1beta1.BuildService/GetBuildKitConnection", connect_go.NewServerStreamHandler(
		"/depot.cli.v1beta1.BuildService/GetBuildKitConnection",
		svc.GetBuildKitConnection,
		opts...,
	))
	mux.Handle("/depot.cli.v1beta1.BuildService/ReportBuildHealth", connect_go.NewClientStreamHandler(
		"/depot.cli.v1beta1.BuildService/ReportBuildHealth",
		svc.ReportBuildHealth,
		opts...,
	))
	mux.Handle("/depot.cli.v1beta1.BuildService/ReportTimings", connect_go.NewUnaryHandler(
		"/depot.cli.v1beta1.BuildService/ReportTimings",
		svc.ReportTimings,
		opts...,
	))
	return "/depot.cli.v1beta1.BuildService/", mux
}

// UnimplementedBuildServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBuildServiceHandler struct{}

func (UnimplementedBuildServiceHandler) CreateBuild(context.Context, *connect_go.Request[v1beta1.CreateBuildRequest]) (*connect_go.Response[v1beta1.CreateBuildResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cli.v1beta1.BuildService.CreateBuild is not implemented"))
}

func (UnimplementedBuildServiceHandler) FinishBuild(context.Context, *connect_go.Request[v1beta1.FinishBuildRequest]) (*connect_go.Response[v1beta1.FinishBuildResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cli.v1beta1.BuildService.FinishBuild is not implemented"))
}

func (UnimplementedBuildServiceHandler) GetBuildKitConnection(context.Context, *connect_go.Request[v1beta1.GetBuildKitConnectionRequest], *connect_go.ServerStream[v1beta1.GetBuildKitConnectionResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cli.v1beta1.BuildService.GetBuildKitConnection is not implemented"))
}

func (UnimplementedBuildServiceHandler) ReportBuildHealth(context.Context, *connect_go.ClientStream[v1beta1.ReportBuildHealthRequest]) (*connect_go.Response[v1beta1.ReportBuildHealthResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cli.v1beta1.BuildService.ReportBuildHealth is not implemented"))
}

func (UnimplementedBuildServiceHandler) ReportTimings(context.Context, *connect_go.Request[v1beta1.ReportTimingsRequest]) (*connect_go.Response[v1beta1.ReportTimingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cli.v1beta1.BuildService.ReportTimings is not implemented"))
}
